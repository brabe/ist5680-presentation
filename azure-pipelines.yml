trigger:
- main

pool:
  # name: Default
  vmImage: ubuntu-latest

variables:
  - name: applicationDirectory
    value: $(Build.SourcesDirectory)/application
  - name: infrastructureDirectory
    value: $(Build.SourcesDirectory)/infrastructure

stages:
  # BUILD APPLICATION
  # - stage: build
  #   displayName: Build
  #   jobs:
  #     - job: app
  #       displayName: Build Application
  #       steps:
  #         - task: DotNetCoreCLI@2
  #           displayName: Build .NET App
  #           inputs:
  #             command: 'publish'
  #             publishWebProjects: false
  #             projects: '**/WeatherForecast.csproj'
  #             arguments: '--self-contained true --runtime alpine-x64 -c Release -o $(applicationDirectory)/WeatherForecast/publish'
  #             modifyOutputPath: false
  #         - task: Docker@2
  #           displayName: Build Docker Container
  #           inputs:
  #             containerRegistry: 'dockerhub'
  #             repository: 'brentrabe/ist5680'
  #             command: 'buildAndPush'
  #             Dockerfile: '$(applicationDirectory)/WeatherForecast/dockerfile'
  #             buildContext: '$(applicationDirectory)/WeatherForecast/'
  #             tags: |
  #               $(Build.BuildId)
  #               latest
  #             addPipelineData: false
  #             addBaseImageData: false
  # BUILD INFRASTRUCTURE
  - stage: infrastructure
    displayName: Infrastructure
    jobs: 
      - job: terraformDeployment
        displayName: Deploy Terraform
        steps:
          - task: AzureKeyVault@2
            displayName: Get Secrets from AKV
            inputs:
              azureSubscription: 'Action Pack Subscription'
              KeyVaultName: 'gts-tf-keyvault'
              SecretsFilter: 'terraform-sp-id, terraform-sp-key, terraform-sp-tenant, terraform-sp-subscription'
          - task: Bash@3 
            displayName: Terraform Init
            inputs:
              workingDirectory: $(infrastructureDirectory)
              script: |
                terraform init -no-color
              targetType: inline
            env:
              ARM_SUBSCRIPTION_ID: $(terraform-sp-subscription)
              ARM_TENANT_ID: $(terraform-sp-tenant)
              ARM_CLIENT_ID: $(terraform-sp-id)
              ARM_CLIENT_SECRET: $(terraform-sp-key)
          - task: Bash@3 
            displayName: Terraform Apply
            inputs:
              workingDirectory: $(infrastructureDirectory)
              script: |
                terraform apply -no-color -auto-approve
              targetType: inline
            env:
              ARM_SUBSCRIPTION_ID: $(terraform-sp-subscription)
              ARM_TENANT_ID: $(terraform-sp-tenant)
              ARM_CLIENT_ID: $(terraform-sp-id)
              ARM_CLIENT_SECRET: $(terraform-sp-key)